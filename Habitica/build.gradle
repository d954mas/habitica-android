apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'com.android.databinding'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'
apply from: '../code_quality_tools/quality.gradle'
buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.1'
        classpath 'com.frogermcs.androiddevmetrics:androiddevmetrics-plugin:0.4'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'io.fabric.tools:gradle:1.21.5'
    }
}
repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://maven.fabric.io/public' }
    maven { url "http://dl.bintray.com/florent37/maven" }// Material View Pager
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" } // Markdown
    maven { url "https://jitpack.io" }
}
android {
    compileSdkVersion 25
    buildToolsVersion "24.0.3"
    defaultConfig {
        applicationId "com.habitrpg.android.habitica"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Make generated apks contain version name and code.
        archivesBaseName = "app-${android.defaultConfig.versionName}-${android.defaultConfig.versionName}"
        //region native code
        /*ndk {
            abiFilters "armeabi", "armeabi-v7a", "mips", "x86"
        }

        splits {
            abi {
                enable true
                reset()
                include 'armeabi', 'armeabi-v7a', 'mips', 'x86' //select ABIs to build APKs for
                universalApk true //generate an additional APK that contains all the ABIs
            }
        }
// map for the version code
        project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'mips': 5, 'x86': 8]

// Rename with proper versioning
        android.applicationVariants.all { variant ->
            // assign different version code for each output
            variant.outputs.each { output ->
                output.versionCodeOverride =
                        project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                                1000000 +
                                android.defaultConfig.versionCode
            }
        }*/
//endregion
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        yamblz {
            storeFile file('keystore.jks')
            storePassword 'yamblz'
            keyAlias 'yamblz'
            keyPassword 'yamblz'
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.yamblz
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "content_provider", "com.habitrpg.android.habitica.fileprovider"
        }
        debug {
            ext.enableCrashlytics = false
            signingConfig signingConfigs.yamblz
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.debug'
            resValue "string", "content_provider", "com.habitrpg.android.habitica.debug.fileprovider"
        }
    }
    lintOptions {
        lintConfig file("lint.xml")//fixed okhttp
        disable 'GoogleAppIndexingWarning' // BaseApp does not have deep linking.
        abortOnError false // Fail early.
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
}

ext {
    supportLib = '25.0.0'
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //region all
    compile "com.android.support:appcompat-v7:$supportLib"
    compile "com.android.support:recyclerview-v7:$supportLib"
    compile "com.android.support:cardview-v7:$supportLib"
    compile "com.android.support:design:$supportLib"
    compile "com.android.support:preference-v14:$supportLib"
    compile "com.android.support:support-compat:$supportLib"
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.0'
    compile('com.squareup.retrofit2:retrofit:2.1.0') {
        exclude module: 'okhttp'
    }
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.jakewharton.timber:timber:4.3.1'
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.google.dagger:dagger:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'com.hannesdorfmann.fragmentargs:annotation:3.0.2'
    apt 'com.hannesdorfmann.fragmentargs:processor:3.0.2'
    compile 'com.arello-mobile:moxy:1.2.1'
    provided 'com.arello-mobile:moxy-compiler:1.2.1'
    compile 'com.arello-mobile:moxy-app-compat:1.2.1'
    compile('com.mikepenz:materialdrawer:5.3.6@aar') {
        transitive = true
    }
    compile 'com.github.viirus:emoji-lib:0.0.3.2'
    compile 'com.commonsware.cwac:anddown:0.2.4'
    compile 'com.github.clans:fab:1.6.4'
    apt 'com.raizlabs.android:DBFlow-Compiler:2.2.1'
    compile "com.raizlabs.android:DBFlow-Core:2.2.1"
    compile "com.raizlabs.android:DBFlow:2.2.1"
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'fr.avianey.com.viewpagerindicator:library:2.4.1@aar'
    compile('com.facebook.fresco:fresco:0.14.0') {
        exclude module: 'bolts-android'
    }
    compile('com.facebook.fresco:animated-gif:0.14.0') {
        exclude module: 'bolts-android'
    }
    //endregion

    releaseCompile('com.crashlytics.sdk.android:crashlytics:2.6.0@aar') {
        transitive = true;
    }
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    //region debug
    debugCompile 'com.facebook.stetho:stetho:1.4.1'
    debugCompile 'com.facebook.stetho:stetho-okhttp3:1.4.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile 'com.github.brianPlummer:tinydancer:0.0.9'
    debugCompile 'com.github.markzhai:blockcanary-android:1.3.1'
    debugCompile 'com.github.pedrovgs:lynx:1.6'
    //endregion

    // region tests
    testCompile "junit:junit:4.10"
    testCompile "org.assertj:assertj-core:1.7.0"
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile "org.robolectric:robolectric:3.1"
    testCompile 'org.robolectric:shadows-multidex:3.1'
    testCompile "org.robolectric:shadows-support-v4:3.1"
    testCompile "org.mockito:mockito-core:1.10.19"
    //endregion
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:$supportLib"
    }
}

//./gradlew app:build -PdexCount
def dexCount = project.hasProperty('dexCount')
if (dexCount) {
    apply plugin: 'com.getkeepsafe.dexcount'
    dexcount {
        format = 'list'
        includeFieldCount = true
        includeTotalMethodCount = true
        orderByMethodCount = false
        verbose = true
        maxTreeDepth = Integer.MAX_VALUE
    }
}

// Add Habitica Properties to buildConfigField
final File HRPG_PROPS_FILE = new File('habitica.properties')
if (HRPG_PROPS_FILE.canRead()) {
    def Properties HRPG_PROPS = new Properties()
    HRPG_PROPS.load(new FileInputStream(HRPG_PROPS_FILE))

    if (HRPG_PROPS != null) {
        android.buildTypes.all { buildType ->
            HRPG_PROPS.any { property ->
                buildType.buildConfigField "String", property.key, "\"${property.value}\""
            }
        }
    } else {
        throw new InvalidUserDataException('habitica.properties found but some entries are missing')
    }
} else {
    throw new MissingResourceException('habitica.properties not found')
}




